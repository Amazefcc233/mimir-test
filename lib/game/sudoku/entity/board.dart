import 'package:sit/utils/list2d.dart';
import 'package:sudoku_solver_generator/sudoku_solver_generator.dart';

const sudokuSides = 9;

class SudokuCell {
  /// A negative value (e.g., -1) indicates a pre-filled cell generated by the puzzle.
  /// The user cannot modify this value.
  /// `0` means the cell is empty and awaits user input.
  final int userInput;

  /// The correct value that the user should fill in the cell (1 to 9).
  final int correctValue;

  const SudokuCell({
    required this.userInput,
    required this.correctValue,
  });

  bool get canUserInput => userInput < 0;

  bool get emptyInput {
    assert(userInput >= 0, "Developer should check `canUserInput` before access this");
    return userInput == 0;
  }
}

extension type SudokuBoard(List2D<SudokuCell> cells) {
  factory SudokuBoard.generate({required int emptySquares}) {
    final generator = SudokuGenerator(emptySquares: emptySquares);
    final puzzle = generator.newSudoku;
    final solved = generator.newSudokuSolved;
    return SudokuBoard(List2D.generate(sudokuSides, sudokuSides, (row, column) {
      return SudokuCell(
        userInput: puzzle[row][column] == 0 ? 0 : -1,
        correctValue: solved[row][column],
      );
    }));
  }
}
